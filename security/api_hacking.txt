first Install Docker
then install crapi from github repo
then install Burpsuite
add jwt editor extension in Burpsuite


TOP TEN OWASP

1 API1:2019 - BROKEN OBJECT LEVEL AUTHORIZATION (IDOR)
  API tend to expose endpoints that handle object identifiers,
  creating a wide attack surface level Access Control issue.
  Object level autorization checks should be considered in every
  function that access a data source using input from the user

2 API2:2019 - BROKEN USER AUTHENTICATION
  Authetication mechanisms are often implemented incorrectly,
  allowing attackers to compromise authentication tokens or to
  exploit implementation flaws to assume other user's identities
  temporarily or permanently. Compromising the system's ability to
  identify the client/user, compromises API Security overall

3 API:2019 - EXCESSIVE DATA EXPOSURE
  Looking forward to generic implementation, developers tend to
  expose all object properties without considering their individual
  sensitivity, relying on clients to perform the data filtering before
  displaying it to the user.

4 API:2019 - LACK OF RESOURCES & RATE LIMITING
  Quite Often, API do not impose any restrictions on the size or
  number of resources that can be requested by the client/user. not
  only can this impact the API server performance, leading to
  Denial of Service(DOS), but also leaves the door open to
  authentication flaws such as brute force

5 API:2019 - BROKEN FUNCTION LEVEL AUTHORIZATION
  Complex access Control policies with different hierarchies,
  groups, and roles, and an unclear separation between
  administrative and regular functions, tend to lead to autorization
  flaws. By exploiting these issues, attackers gain access to other
  user's resources and/or administrative functions.

6 API:2019 - MASS ASSIGNMENT
 Binding client provided data(e.g JSON) to data models, without
 proper properties filtering based on a whitelist, usually lead to
 Mass Assignment. Either guessing Object properties, exploring
 other API endpoints, reading the documentation, or providing
 additional object properties in request payloads, allows attackers
 to modify object properties they are not supposed to.

8 API:2019 - INJECTION
  Injection flaws, such as SQL, NoSQL, Command Injection, etc.,
  occur when untrusted data is sent to an interpreter as part of a
  Command or query. The attacker's malicious data can trick the
  interpreter into executing unintended commands or accessing data
  without proper authorization.

9 BROKEN ACCESS CONTROL
  Vulnerabilities that allow attackers to bypass access controls and gain
  unauthorized access to resources or functionalities. This can occur when
  access controls are not properly implemented or enforced, or when user
  input is not properly validated.

10 JSON WEB TOKEN
  JWT Vulnerabilities typically arise due to flawed JWT handling within the
  application itself. JWT attacks involve a user sending modified JWTs to
  the server in order to achieve a malicious goal. Typically, this goal is to
  bypass authentication and access controls by impersonating another
  user who has already been authenticated.
   
   ALOGORIHM CONFUSING ATTACK
   NONE ALOGORIHM ATTACK


   COMMON API SECURITY ISSUES
   API Bugs are a common source  of news we hear about security breaches.

   Security issues and vulnerabilities in APIs typically fall into a few distinct categories

   1)Access controls
    1.1)Authorization
    1.2) Authentication
  2)Rate Limiting
  3)Input Validation
  4)Restricting HTTP Methods
  5)3rd Party API abuse
  6)Other application logic errors   


  FUZZING
   Things you can fuzz for:
    Remote Code Execution
    Cross site scripting
    Local/Remote File Inclusion
    SQL/NoSQL Injection
    Request Splitting
    Deserialization
    XXE and other templated language fun
    Encoding errors with junk characters, control character,Emoji, etc.
    File upload vulnerabilities
    SSRF

    Tools you can use:
     Burpsuite
    Enumeration Tools(Gobuster, Dirb etc.)
    Custom Scripts 
    PROTIP:Speed up your fuzzing by making HEAD request



   How Web Applications Work 21
Table 1-2: HTTP Methods
Method Purpose
GET: GET requests attempt to gather resources from the web server This
could be any resource, including a web page, user data, a video, an
address, and so on If the request is successful, the server will provide the
resource; otherwise, the server will provide a response explaining why it
was unable to get the requested resource

POST: POST requests submit data contained in the body of the request to a web
server This could include client records, requests to transfer money from
one account to another, and status updates, for example If a client sub-
mits the same POST request multiple times, the server will create multiple
results

PUT: PUT requests instruct the web server to store submitted data under the
requested URL PUT is primarily used to send a resource to a web server
If a server accepts a PUT request, it will add the resource or completely
replace the existing resource If a PUT request is successful, a new URL
should be created If the same PUT request is submitted again, the results
should remain the same

HEAD: HEAD requests are similar to GET requests, except they request the HTTP
headers only, excluding the message body This request is a quick way to
obtain information about server status and to see if a given URL works

PATCH: PATCH requests are used to partially update resources with the submit-
ted data PATCH requests are likely only available if an HTTP response
includes the Accept-Patch header

OPTIONS: OPTIONS requests are a way for the client to identify all the request
methods allowed from a given web server If the web server responds to
an OPTIONS request, it should respond with all allowed request options

TRACE: TRACE requests are primarily used for debugging input sent from the
client to the server TRACE asks the server to echo back the client’s origi-
nal request, which could reveal that a mechanism is altering the client’s
request before it is processed by the server

CONNECT: CONNECT requests initiate a two-way network connection When
allowed, this request would create a proxy tunnel between the browser
and web server

DELETE: DELETE requests ask that the server remove a given resource


The following subsections detail some of the common REST API headers you will come
across.

Authorization
--------------Content Type-------
Content-Type headers are used to indicate the type of media being trans-
ferred. These headers differ from Accept headers, which state the media
type you want to receive; Content-Type headers describe the media you’re
sending.

1)application/json Used to specify JavaScript Object Notation (JSON) as
a media type. JSON is the most common media type for REST APIs.

2)application/xml Used to specify XML as a media type.

3)application/x-www-form-urlencoded A format in which the values being
sent are encoded and separated by an ampersand (&), and an equal sign
(=) is used between key/value pairs.

Middleware (X) Headers
X-<anything> headers are known as middleware headers and can serve all
sorts of purposes. They are fairly common outside of API requests as well.
X-Response-Time can be used as an API response to indicate how long a
response took to process. X-API-Key can be used as an authorization header
for API keys. X-Powered-By can be used to provide additional information
about backend services. X-Rate-Limit can be used to tell the consumer
how many requests they can make within a given time frame. X-RateLimit-
Remaining can tell a consumer how many requests remain before they vio-
late rate-limit enforcement. (There are many more, but you get the idea.)
X-<anything> middleware headers can provide a lot of useful information to
API consumers and hackers alike.

HMAC
A hash-based message authentication code (HMAC) is the primary API authenti-
cation method used by Amazon Web Services (AWS).
HMAC-MD5(weaker) 
HMAC-SHA1(weaker)
HMAC-SHA256(strong)
HMAC-SHA512(strong)

The actual payload begins just below x-response-time; it provides the browser with the
HTML needed to render the web page.


API INSECURITIES
1)Broken Object Level Authorization
  One of the most prevalent vulnerabilities in APIs is broken object level authori-
zation (BOLA). BOLA vulnerabilities occur when an API provider allows an
API consumer access to resources they are not authorized to access. If an API
endpoint does not have object-level access controls, it won’t perform checks to
make sure users can only access their own resources. When these controls are
missing, User A will be able to successfully request User B’s resources.


2)Broken User Authentication
 Broken user authentication refers to any weakness within the API authentica-
tion process. These vulnerabilities typically occur when an API provider
either doesn’t implement an authentication protection mechanism or
implements a mechanism incorrectly.

3)Excessive Data Exposure
 Excessive data exposure is when an API endpoint responds with more informa-
tion than is needed to fulfill a request. This often occurs when the provider
expects the API consumer to filter results; in other words, when a consumer
requests specific information, the provider might respond with all sorts of
information, assuming the consumer will then remove any data they don’t
need from the response. When this vulnerability is present, it can be the
equivalent of asking someone for their name and having them respond with
their name, date of birth, email address, phone number, and the identifica-
tion of every other person they know.

4)Lack of Resources and Rate Limiting
 One of the more important vulnerabilities to test for is lack of resources and
rate limiting. Rate limiting plays an important role in the monetization and
availability of APIs. Without limiting the number of requests consumers
can make, an API provider’s infrastructure could be overwhelmed by the
requests. Too many requests without enough resources will lead to the provid-
er’s systems crashing and becoming unavailable—a denial of service (DoS) state

5)Broken Function Level Authorization
  Broken function level authorization (BFLA) is a vulnerability where a user of
one role or group is able to access the API functionality of another role or
group. API providers will often have different roles for different types of
accounts, such as public users, merchants, partners, administrators, and
so on. A BFLA is present if you are able to use the functionality of another
privilege level or group.

6)Mass Assignment
 Mass assignment occurs when an API consumer includes more parameters in
their requests than the application intended and the application adds these
parameters to code variables or internal objects. In this situation, a con-
sumer may be able to edit object properties or escalate privileges.

7)Security Misconfigurations
 Security misconfigurations include all the mistakes developers could make
within the supporting security configurations of an API. If a security mis-
configuration is severe enough, it can lead to sensitive information expo-
sure or a complete system takeover. For example, if the API’s supporting
security configuration reveals an unpatched vulnerability, there is a chance
that an attacker could leverage a published exploit to easily “pwn” the API
and its system.
 
The X-Powered-By header reveals backend technology. Headers like this
one will often advertise the exact supporting service and its version. You
could use information like this to search for exploits published for that ver-
sion of software.
X-XSS-Protection is exactly what it looks like: a header meant to prevent
cross-site scripting (XSS) attacks. XSS is a common type of injection vul-
nerability where an attacker can insert scripts into a web page and trick
end users into clicking malicious links. We will cover XSS and cross-API
scripting (XAS) in Chapter 12. An X-XSS-Protection value of 0 indicates no
protections are in place, and a value of 1 indicates that protection is turned
on. This header, and others like it, clearly reveals whether a security control
is in place.
The X-Response-Time header is middleware that provides usage metrics.
In the previous example, its value represents 566.43 milliseconds. However,
if the API isn’t configured properly, this header can function as a side chan-
nel used to reveal existing resources. If the X-Response-Time header has a
consistent response time for nonexistent records, for example, but increases
its response time for certain other records, this could be an indication that
those records exist

8) Injections
Injection flaws exist when a request is passed to the API’s supporting infra-
structure and the API provider doesn’t filter the input to remove unwanted
characters (a process known as input sanitization). As a result, the infrastruc-
ture might treat data from the request as code and run it. When this sort of
flaw is present, you’ll be able to conduct injection attacks such as SQL injec-
tion, NoSQL injection, and system command injection.

9)Improper Assets Management
Improper assets management takes place when an organization exposes APIs
that are either retired or still in development. As with any software, old API
versions are more likely to contain vulnerabilities because they are no lon-
ger being patched and upgraded. Likewise, APIs that are still being devel-
oped are typically not as secure as their production API counterparts.
Improper assets management can lead to other vulnerabilities, such
as excessive data exposure, information disclosure, mass assignment,
improper rate limiting, and API injection.

10)Business Logic Vulnerabilities
 




Lab #1: Enumerating the User Accounts in a REST API
 In this lab, our goal is simple: find the total number of user accounts
in reqres.in, 


LIST VULNERABLE APPLICATIONS
OWASPcrAPI, OWASP Juice Shop, OWASP DevSlop’s Pixi, and Damn Vulnerable GraphQL. 